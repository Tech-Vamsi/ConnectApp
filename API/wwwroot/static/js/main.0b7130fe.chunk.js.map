{"version":3,"sources":["App/API/Agent.ts","App/Models/Activity.ts","App/Models/Profile.ts","App/stores/ActivityStore.ts","App/stores/CommentStore.ts","App/stores/CommonStore.ts","App/stores/modelStore.ts","App/stores/ProfileStore.ts","App/stores/UserStore.ts","App/stores/store.ts","App/Layout/NavBar.tsx","Feature/Profiles/ProfileCard.tsx","Feature/activities/dashboard/ActivityListItemAttendee.tsx","Feature/activities/dashboard/ActivityListItem.tsx","Feature/activities/dashboard/ActivityList.tsx","Feature/activities/dashboard/ActivityFilters.tsx","Feature/activities/dashboard/ActivityDashboard.tsx","Feature/home/HomePage.tsx","App/Common/Form/CustomInput.tsx","App/Common/Form/CustomTextArea.tsx","App/Common/CategoryOptions.ts","App/Common/Form/CustomSelectInput.tsx","App/Common/Form/CustomDatePicker.tsx","App/Models/form/ActivityForm.tsx","Feature/activities/dashboard/details/ActivityDetailedHeader.tsx","Feature/activities/dashboard/details/ActivityDetailedSideBar.tsx","Feature/activities/dashboard/details/ActivityDetailedInfo.tsx","Feature/activities/dashboard/details/ActivityDetailedChat.tsx","Feature/Errors/NotFound.tsx","Feature/activities/dashboard/details/ActivityDetails.tsx","Feature/Users/LoginForm.tsx","App/Common/modal/ModalContainer.tsx","Feature/Users/RegisterForm.tsx","App/Common/ImageUpload/PhotoWidgetCropper.tsx","App/Common/ImageUpload/PhotoWidgetDropZone.tsx","App/Common/ImageUpload/PhotoUploadWidget.tsx","Feature/Profiles/ProfilePhotos.tsx","Feature/Profiles/ProfileContent.tsx","Feature/Profiles/ProfileHeader.tsx","Feature/Profiles/ProfilePage.tsx","App/Layout/App.tsx","reportWebVitals.ts","index.tsx"],"names":["axios","defaults","baseURL","process","controller","AbortController","interceptors","request","use","a","config","token","store","commonStore","headers","response","error","data","status","toast","method","errors","hasOwnProperty","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activites","list","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","Activity","init","Object","assign","this","ActivityFormValues","title","category","description","time","city","venue","Profile","userName","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","sumitting","loadActivities","activities","runInAction","forEach","setActivity","openCreateForm","console","log","createActivity","userStore","attendee","newActivity","hostUsername","attendees","updateActivity","updatedActivity","getActivity","set","deleteActivity","loadActivity","isGoing","some","isHost","host","find","x","Date","updateAttendence","filter","push","cancelActivityToggle","isCancelled","clearSelectedActivity","undefined","makeAutoObservable","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","format","CommentStore","comments","hubConnection","createHubConnection","activityId","activityStore","signalr","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","Information","build","start","catch","on","comment","unshift","stopHubConnection","stop","clearComments","addComment","invoke","CommonStore","window","localStorage","getItem","appLoaded","setToken","setItem","setAppLoaded","reaction","removeItem","ModalStore","modal","open","openModal","content","closeModal","ProfileStore","profile","loadProfile","photo","photos","isMain","setImage","p","UserStore","cred","logout","getUser","creds","Image","modalStore","profileStore","commentStore","StoreContext","createContext","useStore","useContext","observer","Menu","secondary","Item","Button","as","Link","inverted","color","to","style","fontFamily","isLoggedIn","position","marginRight","src","avatar","spaced","Dropdown","pointing","text","onClick","icon","Card","Content","Header","Description","extra","Icon","name","List","horizontal","map","Popup","hoverable","key","trigger","size","circular","attached","width","backgroundColor","wrapped","ui","fontSize","Label","basic","Segment","border","borderColor","groupedActivities","useEffect","group","ActivityFilters","vertical","props","navigate","useNavigate","height","display","alignItems","justifyContent","overflow","Dimmer","active","Loader","Grid","Column","textAlign","className","Container","alt","marginBottom","marginTop","CustomInput","useField","field","meta","Form","Field","touched","label","CustomTextArea","lablel","TextArea","CategoryOptions","value","CustomSelectInput","helpers","Select","clearable","options","onBlur","setTouched","onChange","e","d","setValue","placeholder","CustomDatePicker","date","locale","showTimeSelect","timeFormat","timeIntervals","dateFormat","minDate","selected","submitting","useParams","navGate","useState","validator","Yup","required","handleCancel","abort","clearing","enableReinitialize","initialValues","onSubmit","setTimeout","uuid","handleFormSubmit","validationSchema","handleSubmit","isValid","isSubmitting","dirty","autoComplete","row","variant","disabled","type","Spinner","animation","role","aria-hidden","Group","padding","zIndex","left","top","ribbon","postion","bottom","floated","length","relaxed","divided","verticalAlign","Extra","background","resetForm","labelPosition","primary","Comment","Avatar","Author","Metadata","createAt","Text","whiteSpace","NotFound","Inline","flexDirection","ActivityDetailedSideBar","ValidationSchema","email","password","setErrors","positive","fluid","Modal","onClose","displayname","PhotoWidetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","onInitialized","cropper","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","files","revokeObjectURL","minHeight","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","setAddPhotoMode","setTarget","Tab","Pane","itemsPerRow","widths","currentTarget","handleSetMainPhoto","handleDeletePhoto","panes","menuItem","render","menu","menuPosition","profiles","Statistic","Divider","Reveal","animated","visible","hidden","location","useLocation","finally","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","history","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.0b7130fe.chunk.js","sourcesContent":["import axios, { AxiosError, AxiosResponse } from 'axios'\r\nimport { toast } from 'react-toastify';\r\nimport { Activity, ActivityFormValues } from '../../App/Models/Activity'\r\nimport { store } from '../stores/store';\r\nimport { User, UserFormValues } from '../Models/user';\r\nimport { Photo, Profile } from '../Models/Profile';\r\nconst sleep = (delay: number) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(resolve, delay);\r\n  })\r\n}\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\nexport const controller = new AbortController();\r\n\r\naxios.interceptors.request.use( async (config) =>{\r\n\r\n  const token = store.commonStore.token;\r\n  if (token) {\r\n    config.headers = {\r\n      'Authorization': `Bearer ${token}`\r\n    }\r\n    }else {\r\n    config.headers = {}\r\n  }\r\n  \r\n    return config;\r\n  \r\n})\r\n\r\n\r\n\r\n\r\n\r\naxios.interceptors.response.use(async response => {\r\n\r\n  if(process.env.NODE_ENV==='development')\r\n    await sleep(1000);\r\n    return response;\r\n\r\n  // } catch (error) {\r\n  //   console.log(error);\r\n  //   return await Promise.reject(error);\r\n  // }\r\n}, (error: AxiosError) => {\r\n  const { data, status,config } = error.response!;\r\n  switch (status) {\r\n    case 400:\r\n      if (typeof data === 'string')\r\n      {\r\n        toast.error(data);\r\n        }\r\n      if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n       \r\n     }\r\n\r\n      // if (data.errors) {\r\n      //   const modalStateErrors = [];\r\n      //   for (const key in data.errors) {\r\n      //     if (data.errors[key]) {\r\n      //       modalStateErrors.push(data.errors[key]);\r\n      //     }\r\n      //   }\r\n      //   throw modalStateErrors.flat();\r\n      // } else {\r\n      toast.error(\"Bad Request\");\r\n  //}\r\n      break;\r\n    case 401:\r\n      toast.error(\"unauthorised Request\");\r\n      break;\r\n    case 404:\r\n      toast.error(\"Not Found\");\r\n     \r\n      break;\r\n    case 500:\r\n      store.commonStore.setServerError(data);\r\n        toast.error(\"Server Error\");\r\n  }\r\n  return Promise.reject(error);\r\n})\r\n\r\n\r\nconst responseBody =<T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n  get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n  post: <T>(url: string, body: {}) => axios.post<T>(url,body).then(responseBody),\r\n  put:<T> (url: string, body: {}) => axios.put<T>(url,body).then(responseBody),\r\n  delete: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n \r\n  \r\n}\r\n\r\nconst Activites = {\r\n  list: () => requests.get<Activity[]>('/Activities'),\r\n  details: (id: string) => requests.get<Activity>(`/Activities/${id}`),\r\n  create: (activity: ActivityFormValues) => requests.post<void>(`/Activities`, activity),\r\n  update: (activity: ActivityFormValues) => requests.put<void>(`/Activities/${activity.id}`, activity),\r\n  delete: (id: string) => requests.delete<void>(`/Activities/${id}`),\r\n  attend:(id: string) => requests.post<void>(`/Activities/${id}/attend`,{}),\r\n}\r\nconst Account = {\r\n  current: () => requests.get<User>('/account'),\r\n  login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n  register:(user:UserFormValues)=>requests.post<User>('/account/register',user)\r\n}\r\n\r\nconst Profiles = {\r\n  get: (username: string) => requests.get<Profile>(`/profile/${username}`),\r\n  uploadPhoto: (file: Blob) => {\r\n    let formData = new FormData();\r\n    formData.append('File', file);\r\n    return axios.post<Photo>('photos', formData, {\r\n      headers:{'Content-type':'multipart/form-data'}\r\n    })\r\n  },\r\n  setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n  deletePhoto:(id:string)=>requests.delete(`/photos/${id}`)\r\n}\r\n\r\n\r\nconst agent = {\r\n  Activites,\r\n  Account,\r\n  Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./Profile\";\r\n\r\nexport interface Activity {\r\n  id: string;\r\n  title: string;\r\n  time:Date| null;\r\n  description: string;\r\n  category: string;\r\n  city: string;\r\n  venue: string;\r\n  hostUsername: string;\r\n  isCancelled: boolean;\r\n  isGoing: boolean;\r\n  isHost: boolean;\r\n  host?: Profile;\r\n  attendees:Profile[]\r\n}\r\n\r\nexport class Activity implements Activity{\r\n  constructor(init?: ActivityFormValues)\r\n  {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport class ActivityFormValues{\r\n  id?: string;\r\n  title: string = '';\r\n  category: string = '';\r\n  description: string = '';\r\n  time: Date | null = null;\r\n  city: string = '';\r\n  venue: string = '';\r\n\r\n  constructor(activity?: ActivityFormValues)\r\n  {\r\n    if (activity)\r\n    {\r\n      this.id = activity.id;\r\n      this.title = activity.title;\r\n      this.category = activity.category;\r\n      this.description = activity.description;\r\n      this.time = activity.time;\r\n      this.city = activity.city;\r\n      this.venue = activity.venue;\r\n      }\r\n  }\r\n\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile{\r\n  username: string;\r\n  displayName: string;\r\n  image?: string;\r\n  bio?: string;\r\n  photos?:Photo[]\r\n}\r\n\r\nexport class Profile implements Profile{\r\n  constructor(user: User) {\r\n    this.username = user.userName;\r\n    this.displayName = user.displayName;\r\n    this.image = user.image;\r\n  }\r\n}\r\nexport interface Photo{\r\n  id: string;\r\n  url: string;\r\n  isMain: boolean;\r\n}","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from '../API/Agent'\r\nimport { Activity, ActivityFormValues } from '../Models/Activity'\r\nimport { Profile } from \"../Models/Profile\";\r\nimport { store } from \"./store\";\r\n// import { v4 as uuid } from 'uuid';\r\n// import ObjecMapper from 'object-mapper';\r\n\r\nexport default class ActivityStore{\r\n  //activities: Activity[] = [];\r\n  activityRegistry = new Map < string,Activity> ();\r\n  selectedActivity:Activity | undefined;\r\n  editMode = false;\r\n  sumitting = false;\r\n\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n    // makeObservable(this, {\r\n    //   title:observable,\r\n    //   setTitle:action\r\n    // })\r\n  }\r\n\r\n  get activitiesByDate()\r\n  {\r\n    return Array.from(this.activityRegistry.values()).sort((a, b) => a.time!.getTime() - b.time!.getTime());\r\n  }\r\n  get groupedActivities()\r\n  {\r\n    return Object.entries(\r\n      this.activitiesByDate.reduce((activities, activity) => {\r\n        const time = format(activity.time!, 'dd MMM  yyyy');\r\n        activities[time] = activities[time] ? [...activities[time], activity] : [activity];\r\n        return activities;\r\n      }, {} as {[key:string]:Activity[]})\r\n    )\r\n  }\r\n\r\nloadActivities = async () => {\r\n  try {\r\n    const activities = await agent.Activites.list();\r\n    runInAction(() => {\r\n      activities.forEach(activity => {\r\n        this.setActivity(activity);\r\n      })\r\n    })\r\n  } catch(error) {\r\n    // console.log(error);\r\n  }\r\n  }\r\n  // setSelectedActivity =  (id:string) => {\r\n  //  // this.selectedActivity= this.activities.find(act => act.id === id);\r\n  //   this.selectedActivity = this.activityRegistry.get(id);\r\n  // }\r\n  // cancelSelectedActivity = () => {\r\n  //   this.selectedActivity = undefined;\r\n  // }\r\n  // openForm = (id: string) => {\r\n  //   console.log(\"OpenForm Method executed\");\r\n  //   id ? this.setSelectedActivity(id) : this.cancelSelectedActivity();\r\n  //   this.editMode = true;\r\n  // }\r\n  openCreateForm = () => {\r\n    console.log(\"OpenForm Method executed\");\r\n    \r\n    this.editMode = true;\r\n  }\r\n\r\n  // closeForm = () => {\r\n  //   this.editMode = false;\r\n  // }\r\n\r\n  createActivity = async (activity : ActivityFormValues) => {\r\n    const user = store.userStore.user;\r\n    const attendee=new Profile(user!);\r\n    try {\r\n      await agent.Activites.create(activity);\r\n      const newActivity = new Activity(activity);\r\n      newActivity.hostUsername = user!.userName;\r\n      newActivity.attendees = [attendee];\r\n      this.setActivity(newActivity);\r\n      runInAction(() => {\r\n       // this.activities.push(activity);\r\n        \r\n      //  this.activityRegistry.set(activity.id,activity)\r\n        this.selectedActivity = newActivity;\r\n      })\r\n      \r\n      \r\n    } catch (error)\r\n    {\r\n      console.log(error);\r\n      \r\n      //this.closeForm();\r\n    }\r\n  }\r\n\r\n  updateActivity = async (activity:ActivityFormValues) => {\r\n    try {\r\n      await agent.Activites.update(activity);\r\n    \r\n      runInAction(() => {\r\n       // this.activities = [...this.activities.filter(act => act.id !== activity.id), activity];\r\n       // ObjecMapper.merge(activity, this.activities.filter(act => act.id === activity.id))\r\n        if (activity.id)\r\n        {\r\n          let updatedActivity = { ...this.getActivity(activity.id), ...activity }\r\n          this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n          this.selectedActivity = updatedActivity as Activity;\r\n          }\r\n      \r\n      //  this.activities = [...this.activities];\r\n        \r\n        \r\n      })\r\n    } catch (error)\r\n    {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  deleteActivity = async (id: string) => {\r\n    try {\r\n      await agent.Activites.delete(id);\r\n      runInAction(() => {\r\n       // this.activities = [...this.activities.filter(act => act.id !== id)];\r\n        this.activityRegistry.delete(id);\r\n      })\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  loadActivity = async (id:string) => {\r\n    let activity = this.getActivity(id);\r\n    if (activity)\r\n    {\r\n      this.selectedActivity = activity;\r\n      return activity;\r\n    } else {\r\n      try {\r\n        activity = await agent.Activites.details(id);\r\n        this.setActivity(activity);\r\n        runInAction(() => {\r\n          this.selectedActivity = activity;\r\n        })\r\n        return activity;\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n      }\r\n}\r\n\r\n  private setActivity = (activity: Activity) => {\r\n    const user = store.userStore.user;\r\n    if (user) {\r\n      activity.isGoing = activity.attendees!.some(a => a.username === user.userName);\r\n      activity.isHost = activity.hostUsername === user.userName;\r\n      activity.host = activity.attendees.find(x => x.username=== activity.hostUsername);\r\n    }\r\n    \r\n    activity.time = new Date(activity.time!); //activity.time.split('T')[0];\r\n    //   this.activities.push(activity);\r\n       this.activityRegistry.set(activity.id, activity);\r\n  }\r\n  private getActivity = (id: string) => {\r\n    return this.activityRegistry.get(id);\r\n  }\r\n\r\n  updateAttendence = async () => {\r\n    const user = store.userStore.user;\r\n    try {\r\n      await agent.Activites.attend(this.selectedActivity!.id);\r\n      runInAction(() => {\r\n        if (this.selectedActivity?.isGoing) {\r\n          this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(x => x.username !== user?.userName);\r\n          this.selectedActivity.isGoing = false;\r\n        } else {\r\n          const attendee = new Profile(user!);\r\n          this.selectedActivity?.attendees?.push(attendee);\r\n          this.selectedActivity!.isGoing = true;\r\n        }\r\n        this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n      })\r\n    } catch (error) {\r\n      \r\n    } finally {\r\n      \r\n    }\r\n  }\r\n\r\n  cancelActivityToggle = async ()=>{\r\n    try {\r\n\r\n      await agent.Activites.attend(this.selectedActivity!.id)\r\n      runInAction(() => {\r\n        this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n        this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n      })\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  clearSelectedActivity = () => {\r\n    this.selectedActivity = undefined;\r\n  }\r\n\r\n}","import { ChatComment } from \"../Models/Comment\";\r\nimport * as signalr from \"@microsoft/signalr\"\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { store } from \"./store\";\r\nexport default class CommentStore{\r\n  comments: ChatComment[] = [];\r\n  hubConnection: signalr.HubConnection | null = null;\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  createHubConnection = (activityId: string) => {\r\n    if (store.activityStore.selectedActivity)\r\n    {\r\n      this.hubConnection = new signalr.HubConnectionBuilder()\r\n        .withUrl(process.env.REACT_APP_CHAT_URL+'?activityId=' + activityId, {\r\n          accessTokenFactory: () => store.userStore.user?.token!\r\n        })\r\n        .withAutomaticReconnect()\r\n        .configureLogging(signalr.LogLevel.Information)\r\n        .build();\r\n      \r\n      this.hubConnection.start().catch(error => console.log(\"Error establishing the connection \", error))\r\n      this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n        runInAction(() => {\r\n          // comments.forEach(comment => {\r\n          //  // comment.createAt = new Date(comment.createAt+'Z');\r\n          // })\r\n          this.comments = comments;\r\n        })\r\n        this.hubConnection?.on('ReceivedComment', (comment: ChatComment) => {\r\n          runInAction(() => {\r\n            //comment.createAt = new Date(comment.createAt);\r\n            this.comments.unshift(comment);\r\n          })\r\n        })\r\n      });\r\n      }\r\n  }\r\n  stopHubConnection = () => {\r\n    this.hubConnection?.stop().catch(error => console.log(\"Error stopping connection: \", error));\r\n  }\r\n\r\n  clearComments = () => {\r\n    this.comments = [];\r\n    this.stopHubConnection();\r\n  }\r\n\r\n  addComment = async (values: any) => {\r\n    console.log(\"Adding Comment\")\r\n    values.activityId = store.activityStore.selectedActivity?.id;\r\n    try {\r\n      await this.hubConnection?.invoke('SendComment', values);\r\n    } catch (error)\r\n    {\r\n      console.log(error)\r\n    }\r\n  }\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../Models/ServerError\";\r\n\r\nexport default class CommonStore{\r\n  error: ServerError | null = null;\r\n  token: string | null = window.localStorage.getItem('jwt');\r\n  appLoaded=false;\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n\r\n    reaction(\r\n      () => this.token,\r\n      token => {\r\n        if (token)\r\n        {\r\n          window.localStorage.setItem('jwt',token)\r\n        } else {\r\n          window.localStorage.removeItem('jwt');\r\n          }\r\n      }\r\n    )\r\n\r\n  }\r\n\r\n  setServerError = (error: ServerError) => {\r\n    this.error = error;\r\n  }\r\n  setToken = (token: string | null) => {\r\n    if (token) window.localStorage.setItem('jwt', token)\r\n    this.token = token;\r\n  }\r\n  setAppLoaded=()=>{\r\n    this.appLoaded = true;\r\n  }\r\n}","import { makeAutoObservable } from \"mobx\"\n\ninterface Modal{\n    open: boolean;\n    body: JSX.Element | null;\n}\n\nexport default class ModalStore{\n    modal:Modal={\n        open: false,\n        body: null\n    }\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    openModal = (content: JSX.Element) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n\n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../API/Agent\";\r\nimport { Photo, Profile } from \"../Models/Profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore{\r\n  profile: Profile | null = null;\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  get isCurrentUser() {\r\n    if(store.userStore.user && this.profile)\r\n    {\r\n      return store.userStore.user.userName === this.profile.username;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  loadProfile = async (username: string)=>{\r\n    try {\r\n      const profile = await agent.Profiles.get(username);\r\n      runInAction(() => {\r\n        this.profile = profile;\r\n      })\r\n    } catch (error)\r\n    {\r\n      console.log(error);\r\n    }\r\n  }\r\n  uploadPhoto = async (file: Blob) => {\r\n    try {\r\n      const response=await agent.Profiles.uploadPhoto(file);\r\n      const photo = response.data;\r\n      runInAction(() => {\r\n        if (this.profile) {\r\n          this.profile.photos?.push(photo);\r\n          if (photo.isMain && store.userStore.user)\r\n          {\r\n            store.userStore.setImage(photo.url);\r\n            this.profile.image = photo.url;\r\n            }\r\n        }\r\n      })\r\n    } catch (error)\r\n    {\r\n      console.log(error);\r\n    }\r\n  }\r\n  setMainPhoto = async (photo:Photo) => {\r\n    try {\r\n      await agent.Profiles.setMainPhoto(photo.id);\r\n      store.userStore.setImage(photo.url);\r\n      runInAction(() => {\r\n        if (this.profile && this.profile.photos)\r\n        {\r\n          this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n          this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n          this.profile.image = photo.url;\r\n          store.activityStore.loadActivities();\r\n          }\r\n      })\r\n    } catch (error)\r\n    {\r\n      console.log(error);\r\n    }\r\n  }\r\n  \r\n  deletePhoto = async (photo:Photo) => {\r\n    try {\r\n      await agent.Profiles.deletePhoto(photo.id);\r\n      if (this.profile)\r\n      {\r\n        this.profile.photos=this.profile.photos?.filter(p => p.id !== photo.id);\r\n       \r\n        }\r\n    } catch (error)\r\n    {\r\n      console.log(error);\r\n    }\r\n  }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../API/Agent\";\r\nimport { User,UserFormValues } from \"../Models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore{\r\n  user: User | null = null;\r\n\r\n  constructor() {\r\n    makeAutoObservable(this)\r\n  }\r\n\r\n  get isLoggedIn() {\r\n    if (this.user === null)\r\n    {\r\n      return false;\r\n      }\r\n    return true;\r\n  }\r\n  login = async (cred: UserFormValues) => {\r\n    \r\n    try {\r\n      const user = await agent.Account.login(cred);\r\n      store.commonStore.setToken(user.token);\r\n      runInAction(() => {\r\n       \r\n        this.user = user;\r\n      });\r\n      \r\n    } catch (error)\r\n    {\r\n      throw error;\r\n    }\r\n    \r\n  }\r\n  logout = () => {\r\n    store.commonStore.setToken(null);\r\n    window.localStorage.removeItem('jwt');\r\n    this.user = null;\r\n    \r\n  }\r\n\r\n  getUser = async () => {\r\n  try {\r\n    const user = await agent.Account.current();\r\n    runInAction(() => {\r\n      this.user = user;\r\n      \r\n    })\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n  }\r\n\r\n  register = async (creds: UserFormValues) => {\r\n   \r\n    const user = await agent.Account.register(creds).catch((error) => {\r\n      throw error;\r\n    }).then((user) => {\r\n      store.commonStore.setToken(user.token);\r\n      runInAction(() => {\r\n      \r\n        this.user = user;\r\n      });\r\n    });\r\n    }\r\n    \r\n  setImage = (Image: string) => {\r\n    if (this.user)\r\n    {\r\n      this.user.image = Image;\r\n      }\r\n  }\r\n  }\r\n    \r\n","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./ActivityStore\";\r\nimport CommentStore from \"./CommentStore\";\r\nimport CommonStore from \"./CommonStore\";\r\nimport ModalStore from \"./modelStore\";\r\nimport ProfileStore from \"./ProfileStore\";\r\nimport UserStore from \"./UserStore\";\r\n\r\ninterface Store{\r\n  activityStore: ActivityStore\r\n  commonStore: CommonStore;\r\n  userStore: UserStore;\r\n  modalStore: ModalStore;\r\n  profileStore: ProfileStore;\r\n  commentStore:CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n  activityStore: new ActivityStore(),\r\n  commonStore: new CommonStore(),\r\n  userStore: new UserStore(),\r\n  modalStore: new ModalStore(),\r\n  profileStore: new ProfileStore(),\r\n  commentStore:new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n  return useContext(StoreContext);\r\n}","\r\nimport {observer} from 'mobx-react-lite'\r\nimport { Link } from \"react-router-dom\"\r\nimport React from 'react'\r\n\r\nimport { Button, Menu,Image, Dropdown } from 'semantic-ui-react'\r\nimport { useStore } from '../stores/store'\r\nexport default observer( function NavBar(){\r\n\r\n  const { userStore } = useStore();\r\n  const { user, logout } = userStore;\r\n\r\n return( \r\n  <Menu secondary>\r\n \r\n  <Menu.Item>\r\n       <Button as={Link} inverted color='orange' to='/Activities' style={{fontFamily:'Segoe UI'}}>Activities</Button>\r\n         </Menu.Item>\r\n     <Menu.Item>\r\n     <Button as={Link} inverted color='orange' to='/createActivity' style={{fontFamily:'Segoe UI'}}>Create Activity</Button>\r\n     </Menu.Item>\r\n     {userStore.isLoggedIn &&\r\n       <>\r\n       <Menu.Item>\r\n      \r\n       </Menu.Item>\r\n       <Menu.Item position='right' style={{marginRight:'100px'}}>\r\n         <Image src={user?.image || '/assets/user/png'} avatar spaced='right' />\r\n         <Dropdown pointing='top left' text={user?.displayName}>\r\n         <Dropdown.Menu pointing='top left' text={user?.displayName}>\r\n           <Dropdown.Item as={Link} to={`/profile/${user?.userName}`} text='My Profile'></Dropdown.Item>\r\n             <Dropdown.Item as={Link} to='/' onClick={logout} text=\"Logout\" icon=\"power\"></Dropdown.Item>\r\n           </Dropdown.Menu>\r\n           </Dropdown>\r\n       </Menu.Item>\r\n\r\n       </>\r\n     }\r\n</Menu>\r\n  \r\n  \r\n                  \r\n  )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Card,Image,Icon } from 'semantic-ui-react';\r\nimport { Profile } from '../../App/Models/Profile';\r\n\r\ninterface Props{\r\n  profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({profile}:Props) {\r\n  return (\r\n    <Card as={Link} to={`/profile/${profile.username}`}>\r\n      <Image src={profile.image || '/assets/user.png'} />\r\n      <Card.Content>\r\n        <Card.Header>{profile.displayName}</Card.Header>\r\n        <Card.Description>Bio goes here</Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        <Icon name='user'> 20 followers</Icon>\r\n      </Card.Content>\r\n\r\n    </Card>\r\n\r\n  )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { List,Image, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../App/Models/Profile';\r\nimport ProfileCard from '../../Profiles/ProfileCard';\r\n\r\ninterface Props{\r\n  attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees}:Props) {\r\n  return (\r\n    <List horizontal>\r\n      {attendees.map((attendee) => {\r\n       return <Popup hoverable\r\n          key={attendee.username}\r\n        trigger={ <List.Item key={attendee.username} as={Link} to={`/profile/${attendee.username}`} >\r\n        <Image size='mini' circular src={attendee.image || \"/assets/attendee.png\"}></Image>\r\n          </List.Item>}>\r\n          <Popup.Content>\r\n            <ProfileCard profile={attendee}></ProfileCard>\r\n          </Popup.Content>\r\n    </Popup>\r\n  \r\n      })}\r\n     \r\n    </List>\r\n  )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Card, Image, Label,  Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../App/Models/Activity';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\n//import { useStore } from '../../../App/stores/store';\r\n\r\ninterface Props{\r\n  activity: Activity;\r\n}\r\n\r\nconst ActivityListItem = ({ activity }: Props) => {\r\n  //const { activityStore } = useStore();\r\n // const { activitiesByDate } = activityStore;\r\n  return (\r\n    <Card attached='true' style={{width:\"400px\"}} >\r\n      {activity.isCancelled &&\r\n        <Card.Header  style={{color:'white',backgroundColor:'red'}}>Activity Cancelled</Card.Header>}\r\n      <Image circular src={activity.host?.image ||'/images/avatar/large/matthew.png'} wrapped ui={false} />\r\n    <Card.Content>\r\n        <Card.Header style={{fontFamily:'Segoe UI',fontSize:'1.5rem'}}>{ activity.title}</Card.Header>\r\n      </Card.Content>\r\n      <Card.Content>\r\n        <Card.Description style={{ fontFamily: 'Segoe UI', fontSize: '1.5rem' }}>Hosted by {activity.hostUsername}</Card.Description>\r\n        {activity.isHost && (\r\n          <Card.Content>\r\n          <Card.Description style={{ fontFamily: 'Segoe UI', fontSize: '1.5rem' }}><Label basic color='orange'>You are hosting this activity</Label></Card.Description>\r\n          </Card.Content>\r\n        )}\r\n        {activity.isGoing && !activity.isHost && (\r\n          <Card.Content><Card.Description style={{ fontFamily: 'Segoe UI', fontSize: '1.5rem' }}><Label basic color='green'>You are attending the activity</Label></Card.Description></Card.Content>\r\n        )}\r\n      </Card.Content>\r\n      <Segment secondary>\r\n        <ActivityListItemAttendee attendees={activity.attendees!}/>\r\n      </Segment>\r\n    <Card.Content extra>\r\n    <Link  to={`/activity/${activity.id}`}><Button style={{border:'1px solid',borderColor:'#007FFF',color:'#007FFF',backgroundColor:'white',fontSize:'1rem'}}>View</Button></Link>\r\n    </Card.Content>\r\n  </Card>\r\n  );\r\n}\r\nexport default observer(ActivityListItem);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment, useEffect } from 'react';\r\nimport {  Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../App/stores/store\";\r\nimport ActivityListItem from \"./ActivityListItem\";\r\n\r\nconst ActivityList = () => {\r\n  const { activityStore } = useStore();\r\n  const { groupedActivities } = activityStore;\r\n  \r\n  useEffect(() => {\r\n    \r\n  },[groupedActivities])\r\n  \r\n   \r\n  return (\r\n    <>\r\n      {groupedActivities.map(([group, activities]) => {\r\n       return <Fragment key={group}>\r\n          <Header   style={{fontFamily:'Segoe UI',fontSize:'2rem',width:\"400px\"}}>{group}\r\n        {activities.map(activity => {\r\n       \r\n       return <ActivityListItem key={activity.id} activity={activity}/>\r\n     })}</Header>\r\n        </Fragment>\r\n      })}\r\n     \r\n      </>\r\n  )\r\n}\r\nexport default observer(ActivityList);\r\n","import React from 'react'\r\nimport Calendar from 'react-calendar'\r\nimport { Header, Menu } from 'semantic-ui-react'\r\nconst ActivityFilters = () => {\r\n  return (\r\n    <>\r\n    <Menu vertical size='large' style={{ width: '100%' }}>\r\n      <Header  attached color='teal'>Filters</Header>\r\n      <Menu.Item>All Activities</Menu.Item>\r\n      <Menu.Item>I'm going</Menu.Item>\r\n      <Menu.Item>I'm hosting</Menu.Item>\r\n      </Menu>\r\n      <Header></Header>\r\n      <Calendar/>\r\n      </>\r\n  )\r\n}\r\nexport default ActivityFilters;","import { observer } from \"mobx-react-lite\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport { useStore } from \"../../../App/stores/store\";\r\nimport { useEffect } from \"react\";\r\nimport React from 'react';\r\nimport { Dimmer, Grid, Loader, Segment } from \"semantic-ui-react\";\r\nimport ActivityFilters from \"./ActivityFilters\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n\r\ninterface Props{\r\n  submitting: boolean;\r\n}\r\n\r\nconst ActivityDashboard = (props: Props) => {\r\n  const { activityStore } = useStore();\r\n  //const [submitting, setSubmitting] = useState(false);\r\n  const { activityRegistry,loadActivities } = activityStore;\r\n  const { userStore } = useStore();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n\r\n    if (activityRegistry.size === 0) loadActivities();\r\n    //activityStore.loadActivities();\r\n    if (!userStore.isLoggedIn) navigate(\"/\");\r\n\r\n  },[userStore,activityRegistry.size,loadActivities,navigate])\r\n \r\n  \r\n\r\n  if (activityRegistry.size=== 0)\r\n  {\r\n    return (\r\n\r\n      <Segment style={ {border:'none',width:'100%',height:'100vh',display:'flex',alignItems:'center',justifyContent:'center',overflow:'true'}}>\r\n        <Dimmer active inverted>\r\n          <Loader inverted>Loading</Loader>\r\n        </Dimmer>\r\n      </Segment>\r\n    )}\r\n  \r\n  return (\r\n    <Grid>\r\n      <Grid.Column width='10'>\r\n        <ActivityList></ActivityList>\r\n      </Grid.Column>\r\n      <Grid.Column width='6'>\r\n        <ActivityFilters></ActivityFilters>\r\n      </Grid.Column>\r\n    </Grid>\r\n  //   <div className=\"d-flex justify-content-center  overflow-y: scroll\">\r\n  //     <Container fluid=\"xxl\"  >\r\n     \r\n  //     <ActivityList></ActivityList>\r\n      \r\n  //     </Container>\r\n  //     <div className=\"d-flex flex-column m-5 w-100 \">\r\n  //     <Stack gap={5} >\r\n      \r\n  //         {/* {\r\n  //           activityStore.editMode && \r\n  //           <ActivityForm\r\n  //               submitting={props.submitting}></ActivityForm>\r\n  //         } */}\r\n          \r\n  //     </Stack>\r\n  //     </div>\r\n  // </div>\r\n   \r\n\r\n  )\r\n}\r\nexport default observer(ActivityDashboard);","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Container, Header, Segment,Image } from 'semantic-ui-react'\r\nimport { useStore } from '../../App/stores/store';\r\n\r\nconst HomePage=() =>{\r\n  const { userStore} = useStore();\r\n  return (\r\n<Segment inverted textAlign='center' vertical className='masthead' style={{width:'100vw',height:'100vh'}}>\r\n      <Container>\r\n        <Header as='h1' inverted>\r\n          <Image size='massive' src='assets/logo.png' alt='logo' style={{marginBottom:12}}/>\r\n          Connect\r\n        </Header>\r\n        {userStore.isLoggedIn ? (\r\n          <>\r\n           <Header style={{fontSize:'4rem',color:'white'}}>\r\n           Welcome to Connect\r\n           </Header>\r\n           <Button as={Link} to='/activities' size='huge' style={{marginTop:'100px'}} > Take me to Activities</Button>\r\n          </>) : (\r\n            <>\r\n              <Button as={Link} to='/Login' size='huge' style={{ marginTop: '100px' }} > Login</Button>\r\n              <Button as={Link} to='/Register' size='huge' style={{marginTop:'100px'}} > Register</Button>\r\n            </>\r\n\r\n           )}\r\n       \r\n      </Container>\r\n</Segment>\r\n\r\n    \r\n  )\r\n}\r\nexport default observer(HomePage);","import { useField } from 'formik';\r\nimport React from 'react'\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props{\r\n  placeholder: string;\r\n  name: string;\r\n  type?: string;\r\n  label?: string;\r\n}\r\n\r\nconst CustomInput = (props:Props)=>{\r\n  const [field, meta] = useField(props.name);\r\n  return (\r\n    <Form.Field error={meta.touched && !!meta.error}>\r\n      <label>{ props.label}</label>\r\n      <input {...field} {...props}></input>\r\n      {meta.touched && meta.error ? (\r\n        <Label basic color='red'>{ meta.error}</Label>\r\n      ):null}\r\n    </Form.Field>\r\n\r\n  )\r\n\r\n}\r\n\r\nexport default CustomInput;","import { useField } from 'formik'\r\nimport React from 'react'\r\nimport { Form, Label, TextArea } from 'semantic-ui-react';\r\n\r\ninterface Props{\r\n  placeholder: string;\r\n  name: string;\r\n  lablel?: string;\r\n  row: number;\r\n}\r\n\r\nconst CustomTextArea = (props: Props)=>{\r\n  const [field, meta] = useField(props.name);\r\n  \r\n  return (\r\n    <Form.Field error={meta.touched && !!meta.error}>\r\n      <Label>{props.lablel}</Label>\r\n      <TextArea {...field} {...props}></TextArea>\r\n      {meta.touched && meta.error ? (\r\n        <Label basic color='red'>{ meta.error}</Label>\r\n      ):null}\r\n    </Form.Field>\r\n  )\r\n}\r\n\r\nexport default CustomTextArea;","export const CategoryOptions = [\r\n  { text: \"Culture\", value: 'Culture'},\r\n  { text: \"Food\", value: 'Food' },\r\n  { text: \"Music\", value: 'Music' },\r\n  { text: \"Movies\", value: 'Movies' },\r\n]","import { useField } from 'formik';\r\nimport React from 'react'\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props{\r\n  placeholder: string;\r\n  name: string;\r\n  options: any;\r\n  label?: string;\r\n}\r\n\r\nconst CustomSelectInput = (props:Props)=>{\r\n  const [field, meta,helpers] = useField(props.name);\r\n  return (\r\n    <Form.Field error={meta.touched && !!meta.error}>\r\n      <label>{ props.label}</label>\r\n      <Select\r\n        clearable\r\n        value={field.value || null}\r\n        options={props.options}\r\n        onBlur={()=>helpers.setTouched(true)}\r\n        onChange={(e, d) => helpers.setValue(d.value)}\r\n        placeholder={props.placeholder}\r\n      ></Select>\r\n      {meta.touched && meta.error ? (\r\n        <Label basic color='red'>{ meta.error}</Label>\r\n      ):null}\r\n    </Form.Field>\r\n\r\n  )\r\n\r\n}\r\n\r\nexport default CustomSelectInput;","\r\nimport { useField } from 'formik';\r\nimport React from 'react'\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker from 'react-datepicker'\r\n\r\ninterface Props{\r\n  placeholder: string;\r\n  name: string;\r\n  label?: string;\r\n}\r\n\r\nconst CustomDatePicker = (props:Props)=>{\r\n  const [field, meta,helpers] = useField(props.name);\r\n  \r\n  return (\r\n    <Form.Field error={meta.touched && !!meta.error}>\r\n     \r\n      <DatePicker\r\n      \r\n       onChange={(date) =>helpers.setValue(date) }\r\n       locale=\"en-IN\"\r\n       showTimeSelect\r\n       timeFormat=\"p\"\r\n       timeIntervals={15}\r\n        dateFormat=\"MMMM d,yyyy h:mm aa\"\r\n        minDate={new Date()}\r\n        selected={(field.value && new Date(field.value)) || null}\r\n      \r\n      ></DatePicker>\r\n      \r\n      {meta.touched && meta.error ? (\r\n        <Label basic color='red'>{ meta.error}</Label>\r\n      ):null}\r\n    </Form.Field>\r\n\r\n  )\r\n\r\n}\r\n\r\nexport default CustomDatePicker;","import {  Button,Spinner } from 'react-bootstrap'\r\nimport { useEffect, useState} from 'react'\r\nimport { useStore } from '../../stores/store';\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from 'react';\r\nimport {  useParams } from 'react-router-dom';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Segment } from 'semantic-ui-react';\r\nimport { Formik,Form} from 'formik';\r\nimport { ActivityFormValues } from '../Activity';\r\nimport CustomInput from '../../Common/Form/CustomInput';\r\nimport * as Yup from 'yup'\r\nimport CustomTextArea from '../../Common/Form/CustomTextArea';\r\nimport { CategoryOptions } from '../../Common/CategoryOptions';\r\nimport CustomSelectInput from '../../Common/Form/CustomSelectInput';\r\nimport CustomDatePicker from '../../Common/Form/CustomDatePicker';\r\nimport { controller } from '../../API/Agent';\r\nimport { setTimeout } from 'timers';\r\ninterface Props {\r\n  submitting: boolean;\r\n}\r\n\r\nconst ActivityForm = ({ submitting }: Props) => {\r\n  const { activityStore,userStore } = useStore();\r\n  const { loadActivity, createActivity, updateActivity } = activityStore;\r\n  const { id } = useParams<{ id: string }>();\r\n  const navGate = useNavigate();\r\n\r\n  const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues())\r\n\r\n  const validator = Yup.object({\r\n    title: Yup.string().required(),\r\n    description: Yup.string().required(),\r\n    category: Yup.string().required(),\r\n    city: Yup.string().required(),\r\n    venue: Yup.string().required(),\r\n    time: Yup.string().required(),\r\n    \r\n  })\r\n\r\n  useEffect(() => {\r\n    if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)));\r\n    if(!userStore.isLoggedIn) navGate(\"/\");\r\n\r\n  }, [userStore,activity, setActivity, id, loadActivity,navGate])\r\n  \r\n\r\n  const handleFormSubmit = (activity: ActivityFormValues) => {\r\n    //event.preventDefault();\r\n    if (!activity.id) {\r\n      activity.id = uuid();\r\n      createActivity(activity).then(() =>\r\n        \r\n        setTimeout(() => {\r\n          navGate(`/activity/${activity.id}`);\r\n        }, 5000))\r\n    \r\n      }else {\r\n      updateActivity(activity).then(() => \r\n        setTimeout(() => {\r\n          navGate(`/activity/${activity.id}`);\r\n        }, 5000));\r\n      \r\n \r\n    }\r\n   \r\n  }\r\n  const handleCancel = () => {\r\n    console.log(\"Aborted request\");\r\n    controller.abort()\r\n  }\r\n    //   }\r\n    //   cons={handleChange}= (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    \r\n    //     const { name, value } = event.target;\r\n    //     setActivity({...activity,[name]:value})\r\n    //   }\r\n\r\n    return (\r\n    \r\n      <Segment clearing style={{ width: '50vw' }}>\r\n   \r\n        <Formik enableReinitialize={true} initialValues={activity} onSubmit={values => handleFormSubmit(values)} validationSchema={validator}>\r\n          {({  handleSubmit,isValid,isSubmitting,dirty }) => (\r\n            <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n          \r\n              <CustomInput placeholder=\"Enter Title\" name='title' ></CustomInput>\r\n              <CustomTextArea placeholder=\"Description\" row={3} name='description' ></CustomTextArea>\r\n              <CustomSelectInput options={CategoryOptions} placeholder=\"Category\" name='category'  ></CustomSelectInput>\r\n              <CustomDatePicker placeholder=\"Date\" name='time' ></CustomDatePicker>\r\n              <CustomInput placeholder=\"City\" name='city'  ></CustomInput>\r\n              <CustomInput placeholder=\"Venue\" name='venue' ></CustomInput>\r\n              <Button variant=\"success\"  disabled={!isValid && !isSubmitting} className=\"m-3\" type=\"submit\">\r\n                {submitting &&\r\n                  <Spinner as=\"span\"\r\n                    animation=\"border\"\r\n                    size=\"sm\"\r\n                    role=\"status\"\r\n                    aria-hidden=\"true\">\r\n                  </Spinner>}\r\n                Submit\r\n              </Button>\r\n             <Button variant=\"danger\" onClick={handleCancel} type=\"button\">\r\n                Cancel\r\n              </Button>\r\n            </Form>\r\n          )}\r\n\r\n        </Formik>\r\n   \r\n      </Segment>\r\n    \r\n    \r\n  \r\n  \r\n\r\n  \r\n    )\r\n  }\r\n\r\n\r\nexport default observer(ActivityForm);\r\n","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Label, Segment} from 'semantic-ui-react'\r\nimport { Activity } from '../../../../App/Models/Activity';\r\nimport { useStore } from '../../../../App/stores/store';\r\n\r\n\r\n\r\n\r\ninterface Props {\r\n    activity: Activity \r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n\r\n    const { activityStore:{updateAttendence,cancelActivityToggle} } = useStore();\r\n \r\n    return (\r\n        <Segment.Group style={{width:'700px',marginTop:'30px'}}>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled && \r\n                    <Label style={ {position:'absolute',zIndex:1000,left:-14,top:20}} ribbon color='red'>Cancelled</Label>}\r\n                {/* <Image src={`/assets/categoryImages/${activity?:activity.category}.jpg`} fluid style={activityImageStyle}/> */}\r\n                <Segment style={{ postion:'absolute',bottom:'5%',left:'5%',width:'100%',height:'auto',color:'white' }} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.time!,'dd MMM yyyy h:mm aa')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={ `/profile/${activity.host?.username}`}>{ activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-Activate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                        ></Button>\r\n                    <Button as={Link} to={`/edit/${activity.id}`} style={{ backgroundColor: '#FFD700', color: 'white' }} floated='right' disabled={activity.isCancelled}>\r\n                    Manage Event\r\n                        </Button>\r\n                        </>\r\n                ) : activity.isGoing ? (\r\n                       \r\n                <Button style={{backgroundColor:'#CC0000',color:'white'}} onClick={updateAttendence} disabled={activity.isCancelled}>Cancel attendance</Button> \r\n                ):(<Button  style={{backgroundColor:'#03C03C',color:'white'}} onClick={updateAttendence} disabled={activity.isCancelled}>Join Activity</Button>)}\r\n\r\n                \r\n               \r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../../App/Models/Activity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n  \r\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\r\n    if(!attendees) return null\r\n    return (\r\n        <div style={{width:'300px'}}>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none',backgroundColor:'#082567',color:'white' }}\r\n                attached='top'\r\n                inverted\r\n            >\r\n                {attendees.length} {attendees.length===1?'People':'Peoples' } Going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee=>{\r\n                        return <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&\r\n                                <Label\r\n                                    style={{ position: 'absolute', backgroundColor: '#CC0000', color: 'white' }}\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>}\r\n                         <Image size='mini' src={attendee.image || '/assets/user.png'} circular style={{border:'2px solid',borderColor:'#082567'}} />\r\n                         <Item.Content verticalAlign='middle'>\r\n                             <Item.Header as='h5'>\r\n                                 <Link to={`#`}>{attendee.username}</Link>\r\n                             </Item.Header>\r\n                             <Item.Extra style={{ color: 'orange',fontSize:'1rem' }}>Following</Item.Extra>\r\n                         </Item.Content>\r\n                     </Item>\r\n \r\n                    })}\r\n\r\n{/*                    \r\n                    <Item style={{ position: 'relative' }}>\r\n              <Image size='mini' src={'/assets/user.png'} circular style={{border:'2px solid',borderColor:'#082567'}}/>\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h5'>\r\n                                <Link to={`#`}>Tom</Link>\r\n                            </Item.Header>\r\n                            <Item.Extra style={{ color: 'orange',fontSize:'1rem' }}>Following</Item.Extra>\r\n                        </Item.Content>\r\n                    </Item>\r\n\r\n                    <Item style={{ position: 'relative' }}>\r\n                        <Image size='mini' src={'/assets/user.png'} circular style={{border:'2px solid',borderColor:'#082567'}}/>\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h5'>\r\n                                <Link to={`#`}>Sally</Link>\r\n                            </Item.Header>\r\n                        </Item.Content>\r\n                    </Item> */}\r\n                </List>\r\n            </Segment>\r\n        </div>\r\n\r\n    )\r\n})\r\n","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport { Activity } from '../../../../App/Models/Activity';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group style={{width:'700px'}}>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large'  style={{backgroundColor:'white',color:'#082567'}} name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' style={{backgroundColor:'white',color:'#082567'}}/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.time!,'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large'  style={{backgroundColor:'white',color:'#082567'}}/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Segment, Header, Comment, Form, Button } from 'semantic-ui-react'\r\nimport CustomTextArea from '../../../../App/Common/Form/CustomTextArea';\r\nimport { useStore } from '../../../../App/stores/store';\r\nimport * as Yup from 'yup'\r\ninterface Props{\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n    \r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n            \r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    },[commentStore,activityId])\r\n    return (\r\n        <div style={{width:'700px'}}>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n               // color='teal'\r\n                style={{border: 'none',background:'#082567',color:'white'}}\r\n            >\r\n                <Header >Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n            <Formik\r\n                        onSubmit={(values, { resetForm }) => {\r\n                            commentStore.addComment(values).then(()=>resetForm())\r\n                        }}\r\n                        initialValues={{ body: '' }}\r\n                        validationSchema={Yup.object({\r\n                            body:Yup.string().required()\r\n                        })}\r\n                    >\r\n                        {({ isSubmitting, isValid,handleSubmit }) => (\r\n                          <Form onSubmit={handleSubmit} >\r\n                                <CustomTextArea placeholder='Add Comment' name='body' row={2} />\r\n                                <Button\r\n                                    disabled={isSubmitting || !isValid}\r\n                                    content='Add Reply'\r\n                                    labelPosition='left'\r\n                                    icon='edit'\r\n                                    primary\r\n                                    type=\"submit\"\r\n                                    floated='right'\r\n                                ></Button>\r\n                            </Form>\r\n                        )}\r\n                        </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map((comment) => {\r\n                      return   <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image||'/assets/user.png'}/>\r\n                        <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profile/${comment.username}`}>{ comment.displayName}</Comment.Author>\r\n                            <Comment.Metadata>\r\n                                <div>{comment.createAt}</div>\r\n                            </Comment.Metadata>\r\n                                <Comment.Text style={{whiteSpace:'pre-wrap'}}>{comment.body}</Comment.Text>\r\n                            \r\n                        </Comment.Content>\r\n                    </Comment>\r\n                    })}\r\n                   \r\n                </Comment.Group>\r\n            </Segment>\r\n        </div>\r\n\r\n    )\r\n})","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react'\r\n\r\n\r\nconst NotFound = () => {\r\n  // useEffect(() => {\r\n  //   setTimeout(() => {\r\n  //     navgate('/activities');\r\n  //   }, 5000);\r\n  // })\r\n  return (\r\n    <Segment placeholder style={{width:'100vw',height:'50vh'}}>\r\n      <Header icon>\r\n        <Icon name='search'>\r\n          Oops- Could not find this\r\n        </Icon>\r\n      </Header>\r\n      <Segment.Inline>\r\n        <Button as={Link} to=\"/activities\" primary>\r\n          Return to Home Page\r\n        </Button>\r\n\r\n      </Segment.Inline>\r\n    </Segment>\r\n  )\r\n}\r\nexport default NotFound;","\r\nimport { useStore } from '../../../../App/stores/store';\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from 'react';\r\nimport { useParams} from 'react-router-dom'\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedSideBar from './ActivityDetailedSideBar';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport NotFound from '../../../Errors/NotFound';\r\n\r\n\r\nconst ActivityDetails = () => {\r\n\r\n  const { activityStore } = useStore();\r\n  const { selectedActivity: activity ,loadActivity,clearSelectedActivity} = activityStore;\r\n  const { id } = useParams <{id: string}>();\r\n\r\n  useEffect(() => {\r\n    if (id) loadActivity(id);\r\n    return() => {\r\n      clearSelectedActivity();\r\n    }\r\n  },[id,loadActivity,clearSelectedActivity])\r\n\r\n  if (!activity) {\r\n   return <NotFound/>\r\n  }\r\n  \r\n  return (\r\n\r\n    <Grid style={{width:'100vw',display:'flex',flexDirection:'row',justifyContent:'center'}}>\r\n      <Grid.Column width={6} style={{display:'flex',flexDirection:'column',justifyContent:'center',alignItems:'center'}}>\r\n        <ActivityDetailedHeader activity={activity}/>\r\n        <ActivityDetailedInfo activity={activity}/>\r\n        <ActivityDetailedChat activityId={activity.id}/>\r\n      </Grid.Column>\r\n      <Grid.Column width={6} style={{display:'flex',flexDirection:'column',marginTop:'100px'}}>\r\n      <ActivityDetailedSideBar activity={activity}/>\r\n      </Grid.Column>\r\n    </Grid>\r\n\r\n  )\r\n  \r\n}\r\n\r\nexport default observer(ActivityDetails);","import {  Formik,Form } from 'formik'\r\nimport React, { useEffect } from 'react'\r\nimport { Button, Label } from 'semantic-ui-react'\r\nimport CustomInput from '../../App/Common/Form/CustomInput'\r\nimport * as Yup from 'yup'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useStore } from '../../App/stores/store'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nexport default observer(function LoginForm() {\r\n\r\n  const { userStore} = useStore();\r\n  const navGate = useNavigate();\r\n\r\n  var ValidationSchema = Yup.object({\r\n    email: Yup.string().required(),\r\n    password: Yup.string().required()\r\n  })\r\n  \r\n  useEffect(() => {\r\n    if(userStore.isLoggedIn) navGate('/')\r\n  },[userStore,navGate])\r\n  \r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{ email: '', password: '', error: null }}\r\n      onSubmit={(values, { setErrors }) => {\r\n        userStore.login(values).then(() => {\r\n          \r\n          navGate('/')\r\n        }).catch(error => setErrors({ error: 'Invalid email or password' }))\r\n        setTimeout(() => {\r\n          // navGate(\"/activities\")\r\n        },3000)\r\n     \r\n        \r\n      }}\r\n      validationSchema={ValidationSchema}\r\n    >\r\n      {({ handleSubmit,isValid,errors }) => (\r\n        <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n          <CustomInput name='email' placeholder='Email' type=\"email\"/>\r\n          <CustomInput name='password' placeholder='Password' type=\"password\" />\r\n          {errors.error && \r\n            <Label basic color='red'>{ errors.error}</Label>}\r\n          <Button positive content='Login' disabled={!isValid} type='submit' fluid />\r\n          \r\n\r\n         \r\n        </Form>\r\n      )}\r\n\r\n      </Formik>\r\n  )\r\n})\r\n\r\n\r\n","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nexport default observer(function ModalContainer() {\r\n  const { modalStore } = useStore();\r\n\r\n  return (\r\n    <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n      { modalStore.modal.body}\r\n    </Modal>\r\n\r\n  )\r\n})","import {  Formik,Form} from 'formik'\r\nimport React from 'react'\r\nimport { Button, Label,  } from 'semantic-ui-react'\r\nimport CustomInput from '../../App/Common/Form/CustomInput'\r\nimport * as Yup from 'yup'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useStore } from '../../App/stores/store'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nexport default observer(function RegisterForm() {\r\n\r\n  const { userStore } = useStore();\r\n  const navGate = useNavigate();\r\n\r\n  var ValidationSchema = Yup.object({\r\n    displayname: Yup.string().required(),\r\n    username:Yup.string().required(),\r\n    email: Yup.string().required(),\r\n    password: Yup.string().required()\r\n  })\r\n  \r\n  \r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{ displayname:'',username:'',email: '', password: '', error: null }}\r\n      onSubmit={(values, { setErrors }) => {\r\n        userStore.register(values).then(() => {\r\n          navGate(\"/Login\")\r\n        }).catch(error => setErrors(error))\r\n        \r\n        \r\n     \r\n        \r\n      }}\r\n      validationSchema={ValidationSchema}\r\n    >\r\n      {({ handleSubmit,isValid,errors}) => (\r\n        <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n          <CustomInput name='displayname' placeholder='displayname' type=\"text\" />\r\n          <CustomInput name='username' placeholder='username' type=\"text\"/>\r\n          <CustomInput name='email' placeholder='Email' type=\"email\"/>\r\n          <CustomInput name='password' placeholder='Password' type=\"password\" />\r\n          {errors.error && (\r\n            <Label basic color='red' content={ errors.error}/>)}\r\n          <Button positive content='Register' disabled={!isValid} type='submit' fluid />\r\n          \r\n        </Form>\r\n      )}\r\n\r\n      </Formik>\r\n  )\r\n})\r\n\r\n\r\n","import React from 'react'\r\nimport { Cropper } from 'react-cropper';\r\nimport \"cropperjs/dist/cropper.css\";\r\ninterface Props{\r\n  imagePreview: string;\r\n  setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidetCropper({imagePreview,setCropper}:Props) {\r\n  return (\r\n    <Cropper\r\n      src={imagePreview}\r\n      style={{ height: 200,width:'100%' }}\r\n      initialAspectRatio={1}\r\n      aspectRatio={1}\r\n      preview='.img-preview'\r\n      guides={false}\r\n      viewMode={1}\r\n      autoCropArea={1}\r\n      background={false}\r\n      onInitialized={cropper=>setCropper(cropper)}\r\n    ></Cropper>\r\n  )\r\n}","import { observer } from 'mobx-react-lite'\r\nimport React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props{\r\n  setFiles: (files: any) => void;\r\n}\r\n\r\nexport default observer(function PhotoWidgetDropZone({ setFiles }: Props) {\r\n  \r\n  const dzStyles = {\r\n    \r\n    border: 'dashed 3px #eee',\r\n    borderColor: '#eee',\r\n    borderRadius: '5px',\r\n    paddingTop: '30px',\r\n    textAlign: 'center' as 'center',\r\n    height: 200\r\n\r\n  }\r\n\r\n  const dzActive = {\r\n    borderColor: 'green'\r\n  }\r\n\r\n  const onDrop = useCallback(acceptedFiles => {\r\n    setFiles(acceptedFiles.map((file: any) => {\r\n     return Object.assign(file, {\r\n        preview: URL.createObjectURL(file)\r\n      })\r\n    }))\r\n}, [setFiles])\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <div {...getRootProps()} style={isDragActive ? { ...dzStyles, ...dzActive }:dzStyles}>\r\n      <input {...getInputProps()} />\r\n      <Icon name='upload' size='huge' />\r\n      <Header>Drop image here</Header>\r\n    </div>\r\n  )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Grid, Header } from 'semantic-ui-react'\r\nimport PhotoWidetCropper from './PhotoWidgetCropper'\r\nimport PhotoWidgetDropZone from './PhotoWidgetDropZone'\r\n\r\ninterface Props{\r\n  uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default observer(function PhotoUploadWidget({uploadPhoto}:Props) {\r\n  \r\n  const [files, setFiles] = useState<any>([]);\r\n  const [cropper, setCropper] = useState<Cropper>();\r\n\r\n  function onCrop() {\r\n    if (cropper)\r\n    {\r\n      cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n      }\r\n  }\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      files.forEach((file: any) => {\r\n        URL.revokeObjectURL(file.preview);\r\n        \r\n      });\r\n    }\r\n  },[files])\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={4}>\r\n      <Header color='teal' content='Step 1 - Select Photo'></Header>\r\n        <PhotoWidgetDropZone setFiles={setFiles}/>\r\n      </Grid.Column>\r\n      <Grid.Column width={1}/>\r\n      <Grid.Column width={4}>\r\n        <Header color='teal' content='Step 2 - Resize Photo'></Header>\r\n        {files && files.length > 0 &&\r\n          \r\n          <PhotoWidetCropper setCropper={setCropper} imagePreview={files[0].preview}/>\r\n          \r\n        }\r\n      </Grid.Column>\r\n      <Grid.Column width={1}/>\r\n      <Grid.Column width={4}>\r\n        <Header color='teal' content='Step 3 - Preview & Upload'></Header>\r\n        {files && files.length > 0 &&\r\n          <>\r\n            <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }}/>\r\n            <Button.Group width={2}>\r\n              <Button onClick={onCrop} positive icon='check' />\r\n              <Button onClick={() => setFiles([])} positive icon='close' />\r\n            </Button.Group>\r\n          </>\r\n        }\r\n      </Grid.Column>\r\n  </Grid>  \r\n  )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React, { SyntheticEvent, useState } from 'react'\r\nimport { Card, Header, Tab,Image, Button, Grid } from 'semantic-ui-react'\r\nimport PhotoUploadWidget from '../../App/Common/ImageUpload/PhotoUploadWidget'\r\nimport { Photo, Profile } from '../../App/Models/Profile'\r\nimport { useStore } from '../../App/stores/store'\r\n\r\ninterface Props{\r\n  profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({profile}:Props) {\r\n  \r\n  const { profileStore: { isCurrentUser,uploadPhoto,setMainPhoto,deletePhoto } } = useStore();\r\n  const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n  const [target, setTarget] = useState('');\r\n  const handlePhotoUpload = (file:Blob) => {\r\n   uploadPhoto(file).then(()=>{setAddPhotoMode(false)})\r\n  }\r\n  function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>)\r\n  {\r\n    setTarget(e.currentTarget.name);\r\n    setMainPhoto(photo);\r\n  }\r\n  function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>)\r\n  {\r\n    setTarget(e.currentTarget.name);\r\n    deletePhoto(photo);\r\n  }\r\n\r\n  return (\r\n    <Tab.Pane>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header floated='left' icon='image' content='Photos'></Header>\r\n          {isCurrentUser && (\r\n            <Button floated='right' basic content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n            onClick={()=>setAddPhotoMode(!addPhotoMode)}\r\n            ></Button>\r\n          )}\r\n        </Grid.Column>\r\n        <Grid.Column width={16}>\r\n          {addPhotoMode ? (\r\n           <PhotoUploadWidget  uploadPhoto={handlePhotoUpload} />          ) : (\r\n              <Card.Group  itemsPerRow={5}>\r\n                {profile.photos?.map(photo => {\r\n                  return <Card key={photo.id}>\r\n                    <Image src={photo.url}></Image>\r\n                    {isCurrentUser && (\r\n                      <Button.Group fluid widths={2}>\r\n                        <Button\r\n                          basic\r\n                          color='green'\r\n                          content='Main'\r\n                          name={photo.id}\r\n                          disabled={photo.isMain}\r\n                          onClick={e=>handleSetMainPhoto(photo,e)}\r\n                        ></Button>\r\n                          <Button\r\n                          basic\r\n                          color='red'\r\n                          icon='trash'\r\n                          content='Delete'\r\n                          name={photo.id}\r\n                          disabled={photo.isMain}\r\n                          onClick={e=>handleDeletePhoto(photo,e)}\r\n                        ></Button>\r\n                      </Button.Group>\r\n                    )}\r\n                  </Card>\r\n                })}\r\n              </Card.Group>\r\n            )}\r\n        </Grid.Column>\r\n      </Grid>\r\n      {/* <Header icon='image' content='Photos'></Header>\r\n      <Card.Group itemsPerRow={5}>\r\n        {profile.photos?.map((photo) => {\r\n          return <Card key={photo.id}>\r\n          <Image src={photo.url}></Image>\r\n        </Card>\r\n        })}\r\n       \r\n      </Card.Group> */}\r\n    </Tab.Pane>\r\n  )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Tab } from 'semantic-ui-react'\r\nimport { Profile } from '../../App/Models/Profile';\r\nimport ProfilePhotos from './ProfilePhotos';\r\n\r\ninterface Props{\r\n  profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({ profile}:Props) {\r\n  const panes = [\r\n    { menuItem: 'About', render: () => <Tab.Pane>About Content</Tab.Pane> },\r\n    { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\r\n    { menuItem: 'Events', render: () => <Tab.Pane>Events Content</Tab.Pane> },\r\n    { menuItem: 'Followers', render: () => <Tab.Pane>Followers Content</Tab.Pane> },\r\n    { menuItem: 'Following', render: () => <Tab.Pane>FollowingContent</Tab.Pane> },\r\n  ];\r\n\r\n  return (\r\n    <Tab\r\n      menu={{ fluid: true, vertical: true }}\r\n      menuPosition={'right'}\r\n      panes={panes}\r\n    ></Tab>\r\n  )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Button, Divider, Grid, Header, Item, Reveal, Segment, Statistic } from 'semantic-ui-react'\r\nimport { Profile } from '../../App/Models/Profile'\r\n\r\ninterface Props{\r\n  profiles: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profiles}:Props) {\r\n  return (\r\n    <Segment>\r\n      <Grid>\r\n        <Grid.Column width={12}>\r\n          <Item.Group>\r\n            <Item>\r\n              <Item.Image avatar size='small' src={profiles!.image|| '/assets/user.png'} />\r\n              <Item.Content verticalAlign='middle'>\r\n                <Header as='h1' content={profiles!.displayName}></Header>\r\n              </Item.Content>\r\n            </Item>\r\n            </Item.Group>\r\n            </Grid.Column>\r\n            <Grid.Column width={4}>\r\n              <Statistic.Group>\r\n                <Statistic label='Followers' value='5'></Statistic>\r\n                <Statistic label='Following' value='42'></Statistic>\r\n              </Statistic.Group>\r\n              <Divider />\r\n              <Reveal animated='move'>\r\n                <Reveal.Content visible style={{ width: '100%'}}>\r\n                  <Button fluid color='teal' content='Following'/>\r\n                </Reveal.Content>\r\n                <Reveal.Content  hidden visible style={{ width: '100%'}}>\r\n                  <Button fluid color={true ? 'red' : 'green'} content={true ? 'Unfollow' : 'Follow'}/>\r\n                </Reveal.Content>\r\n              </Reveal>\r\n            </Grid.Column>\r\n          \r\n       \r\n      </Grid>\r\n    </Segment>\r\n  )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { Grid } from 'semantic-ui-react'\r\nimport { useStore } from '../../App/stores/store'\r\nimport ProfileContent from './ProfileContent'\r\nimport ProfileHeader from './ProfileHeader'\r\n\r\nexport default observer(function ProfilePage() {\r\n  const { username } = useParams<string>();\r\n  const { profileStore } = useStore();\r\n  const { loadProfile, profile } = profileStore;\r\n\r\n  useEffect(() => {\r\n    loadProfile(username!);\r\n  },[loadProfile,username])\r\n  return (\r\n    <Grid style={{width:'100%'}}>\r\n      <Grid.Column width={16}>\r\n        {profile &&\r\n          <ProfileHeader profiles={profile} />}\r\n        {profile &&\r\n          <ProfileContent profile={profile} />}\r\n      </Grid.Column>\r\n    </Grid>\r\n    \r\n  )\r\n})","import { observer } from 'mobx-react-lite'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport NavBar  from \"../Layout/NavBar\";\nimport ActivityDashboard from '../../Feature/activities/dashboard/ActivityDashboard';\nimport HomePage from '../../Feature/home/HomePage';\nimport React, { useEffect } from 'react';\nimport ActivityForm from '../Models/form/ActivityForm';\nimport { Route, Routes, useLocation} from 'react-router-dom'\nimport ActivityDetails from '../../Feature/activities/dashboard/details/ActivityDetails';\nimport '../../../src/App.css'\nimport LoginForm from '../../Feature/Users/LoginForm';\nimport { useStore } from '../stores/store';\nimport { Dimmer, Loader, Segment } from 'semantic-ui-react';\nimport ModalContainer from '../Common/modal/ModalContainer';\nimport RegisterForm from '../../Feature/Users/RegisterForm';\nimport ProfilePage from '../../Feature/Profiles/ProfilePage';\nfunction App() {\n\n  const location = useLocation();\n  const { commonStore, userStore } = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => {\n        commonStore.setAppLoaded();\n      })\n    } else {\n      commonStore.setAppLoaded();\n    }\n  },[commonStore,userStore])\n \n  if(!commonStore.appLoaded){\n    return (\n\n      <Segment style={ {border:'none',width:'100%',height:'100vh',display:'flex',alignItems:'center',justifyContent:'center'}}>\n        <Dimmer active inverted>\n          <Loader inverted>Loading</Loader>\n        </Dimmer>\n      </Segment>\n    )}\n\n  return (\n    <div style={{height:'auto',width:'100vw'}} >\n      <NavBar />\n      <ModalContainer ></ModalContainer>\n      <div className=\"d-flex justify-content-center\">\n     \n        <Routes>\n         \n        <Route path=\"/\" element={<HomePage />} />\n        <Route path=\"/activities\" element={<ActivityDashboard submitting={false} />} /> \n        <Route path=\"/activity/:id\" element={<ActivityDetails  />} /> \n          <Route key={location.key} path={'/createactivity'} element={<ActivityForm  submitting={false} /> } /> \n          <Route  key={location.key} path='/edit/:id' element={<ActivityForm  submitting={false} />} />\n          <Route path=\"/Login\" element={<LoginForm />} />\n          <Route path=\"/Register\" element={<RegisterForm />} />\n          <Route path=\"/profile/:username\" element={<ProfilePage/>}/>\n      {/* <Route path=\"*\" element={<NotFound/>}/>       */}\n        </Routes>\n      </div>\n      </div>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App/Layout/styles.css';\nimport App from './App/Layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store,StoreContext } from './App/stores/store';\nimport { BrowserRouter} from 'react-router-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport 'react-calendar/dist/Calendar.css'\nimport {createBrowserHistory}  from 'history'\nimport 'react-datepicker/dist/react-datepicker.css'\n\nexport const history = createBrowserHistory();\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <BrowserRouter >\n    <App />\n    </BrowserRouter>\n      \n </StoreContext.Provider>\n \n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}